import pytest
from fastapi.testclient import TestClient
from app.main import app

@pytest.fixture(scope="module")
def test_client():
    """
    Fixture that provides a TestClient for the FastAPI app.
    Using `scope="module"` so it gets created once per module.
    """
    with TestClient(app) as client:
        yield client


def test_root_endpoint(test_client):
    """
    Test that the root endpoint ("/") returns a 200 OK and the correct message.
    """
    response = test_client.get("/")
    assert response.status_code == 200
    assert response.json() == {"message": "Welcome to FastAPI Scaffold"}


def test_favicon(test_client):
    """
    Test that the favicon endpoint ("/favicon.ico") returns a 200 or 304
    (depending on caching), indicating the file is served.
    """
    response = test_client.get("/favicon.ico")
    # Often returns 200 or sometimes 304 (not modified) if your client re-requests the resource
    assert response.status_code in (200, 304)


def test_users_route_unauthorized(test_client):
    """
    Example: If you have an auth requirement or minimal checks, test that
    /users returns a certain response if not authenticated. If there's no auth,
    you can simply check it responds with a status code and content structure.
    """
    response = test_client.get("/users")
    # Adjust expectations based on your actual auth logic or route design
    assert response.status_code in (200, 401, 403)
