services:
  # PostgreSQL database service
  db:
    image: postgres:15 # Use the official PostgreSQL image, version 15
    container_name: postgres_db # Name of the container for the database
    restart: always # Automatically restart the container if it stops
    environment:
      # Environment variables for PostgreSQL configuration
      POSTGRES_USER: ${POSTGRES_USER:-postgres} # Default username is 'postgres'
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password} # Default password is 'password'
      POSTGRES_DB: ${POSTGRES_DB:-postgres} # Default database name is 'postgres'
    ports:
      - '5432:5432' # Map port 5432 on the host to port 5432 in the container
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist database data in a Docker volume
    healthcheck:
      # Health check to ensure the database is ready
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}']
      interval: 30s # Check every 30 seconds
      timeout: 10s # Timeout after 10 seconds
      retries: 5 # Retry up to 5 times before marking the service as unhealthy

  # FastAPI application service
  api:
    build:
      context: . # Build the Docker image from the current directory
      dockerfile: Dockerfile # Use the specified Dockerfile
      args:
        ENVIRONMENT: ${ENVIRONMENT} # Pass the ENVIRONMENT build argument
    container_name: fastapi_app # Name of the container for the FastAPI app
    restart: always # Automatically restart the container if it stops
    depends_on:
      # Ensure the database service is healthy before starting the API service
      db:
        condition: service_healthy
    environment:
      # Environment variables for the FastAPI application
      - ENVIRONMENT=${ENVIRONMENT} # Application environment (e.g., development, production)
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
        # Connection string for the PostgreSQL database
    ports:
      - '8000:8000' # Map port 8000 on the host to port 8000 in the container
    volumes:
      - .:/app # Mount the current directory into the container for development
    healthcheck:
      # Health check to ensure the FastAPI application is running
      test: ['CMD-SHELL', 'curl -f http://localhost:8000/health || exit 1']
      interval: 30s # Check every 30 seconds
      timeout: 10s # Timeout after 10 seconds
      retries: 5 # Retry up to 5 times before marking the service as unhealthy

# Define Docker volumes for persistent storage
volumes:
  postgres_data: # Volume for PostgreSQL data

# Define a custom network for the services
networks:
  default:
    driver: bridge # Use the default bridge network
